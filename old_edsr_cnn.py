# -*- coding: utf-8 -*-
"""All_denoising.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pxYyGzPC2r13s-D9gBwpb2eL5GrORW6r
"""

import cv2
import os
import numpy as np
import shutil
from google.colab import drive
from tqdm import tqdm  # For progress bar

# Step 1: Mount Google Drive
drive.mount('/content/drive')

# Step 2: Define paths
dataset_path = "/content/drive/MyDrive/total_dataset/"  # Original dataset path
output_path = "/content/drive/MyDrive/h10_denoised_dataset/"  # Folder to save denoised images

# Create the output directory if it doesn't exist
if os.path.exists(output_path):
    shutil.rmtree(output_path)  # Delete old output folder if it exists
os.makedirs(output_path)

# Step 3: Get all image files in the dataset folder
image_files = [f for f in os.listdir(dataset_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.tif'))]

# Step 4: Apply Denoising and Save Images
for img_name in tqdm(image_files, desc="Denoising Images", unit="image"):
    img_path = os.path.join(dataset_path, img_name)

    # Read the image in grayscale mode
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

    if img is None:
        print(f"Skipping {img_name}, could not read file.")
        continue

    # Apply Non-Local Means Denoising
    denoised_img = cv2.fastNlMeansDenoising(img, None, h=10, templateWindowSize=7, searchWindowSize=21)

    # Save the denoised image
    save_path = os.path.join(output_path, img_name)
    cv2.imwrite(save_path, denoised_img)

print(f"âœ… Denoising complete! Denoised images are saved in: {output_path}")

import cv2
import os
import numpy as np
import shutil
from skimage.metrics import structural_similarity as ssim
from google.colab import drive
from tqdm import tqdm  # For progress bar

# Step 1: Mount Google Drive
drive.mount('/content/drive')

# Step 2: Define paths
dataset_path = "/content/drive/MyDrive/total_dataset/"  # Original dataset path
output_path = "/content/drive/MyDrive/h10_denoised_dataset/"  # Folder to save denoised images

# Create the output directory if it doesn't exist
if os.path.exists(output_path):
    shutil.rmtree(output_path)  # Delete old output folder if it exists
os.makedirs(output_path)

# Step 3: Get all image files in the dataset folder
image_files = [f for f in os.listdir(dataset_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.tif'))]

# Initialize lists to store PSNR and SSIM values
psnr_values = []
ssim_values = []

# Step 4: Apply Denoising and Save Images
for img_name in tqdm(image_files, desc="Denoising Images", unit="image"):
    img_path = os.path.join(dataset_path, img_name)

    # Read the image in grayscale mode
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

    if img is None:
        print(f"Skipping {img_name}, could not read file.")
        continue

    # Apply Non-Local Means Denoising
    denoised_img = cv2.fastNlMeansDenoising(img, None, h=10, templateWindowSize=7, searchWindowSize=21)

    # Save the denoised image
    save_path = os.path.join(output_path, img_name)
    cv2.imwrite(save_path, denoised_img)

    # Step 5: Compute PSNR and SSIM
    def calculate_psnr(original, denoised):
        mse = np.mean((original - denoised) ** 2)
        if mse == 0:
            return float('inf')  # Perfect match
        max_pixel = 255.0
        return 20 * np.log10(max_pixel / np.sqrt(mse))

    def calculate_ssim(original, denoised):
        return ssim(original, denoised, data_range=denoised.max() - denoised.min())

    psnr_value = calculate_psnr(img, denoised_img)
    ssim_value = calculate_ssim(img, denoised_img)

    psnr_values.append(psnr_value)
    ssim_values.append(ssim_value)

# Step 6: Compute and display the average PSNR and SSIM values
avg_psnr = sum(psnr_values) / len(psnr_values) if psnr_values else 0
avg_ssim = sum(ssim_values) / len(ssim_values) if ssim_values else 0

print(f"âœ… Denoising complete! Denoised images are saved in: {output_path}")
print(f"ðŸ“Š Average PSNR: {avg_psnr:.2f} dB")
print(f"ðŸ“Š Average SSIM: {avg_ssim:.4f}")

import cv2
import os
import numpy as np
import shutil
from skimage.metrics import structural_similarity as ssim
from google.colab import drive
from tqdm import tqdm  # For progress bar

# Step 1: Mount Google Drive
drive.mount('/content/drive')

# Step 2: Define paths
dataset_path = "/content/drive/MyDrive/total_dataset/"  # Original dataset path
output_path = "/content/drive/MyDrive/h15_denoised_dataset/"  # Folder to save denoised images

# Create the output directory if it doesn't exist
if os.path.exists(output_path):
    shutil.rmtree(output_path)  # Delete old output folder if it exists
os.makedirs(output_path)

# Step 3: Get all image files in the dataset folder
image_files = [f for f in os.listdir(dataset_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.tif'))]

# Initialize lists to store PSNR and SSIM values
psnr_values = []
ssim_values = []

# Step 4: Apply Denoising and Save Images
for img_name in tqdm(image_files, desc="Denoising Images", unit="image"):
    img_path = os.path.join(dataset_path, img_name)

    # Read the image in grayscale mode
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

    if img is None:
        print(f"Skipping {img_name}, could not read file.")
        continue

    # Apply Non-Local Means Denoising
    denoised_img = cv2.fastNlMeansDenoising(img, None, h=8, templateWindowSize=7, searchWindowSize=21)

    # Save the denoised image
    save_path = os.path.join(output_path, img_name)
    cv2.imwrite(save_path, denoised_img)

    # Step 5: Compute PSNR and SSIM
    def calculate_psnr(original, denoised):
        mse = np.mean((original - denoised) ** 2)
        if mse == 0:
            return float('inf')  # Perfect match
        max_pixel = 255.0
        return 20 * np.log10(max_pixel / np.sqrt(mse))

    def calculate_ssim(original, denoised):
        return ssim(original, denoised, data_range=denoised.max() - denoised.min())

    psnr_value = calculate_psnr(img, denoised_img)
    ssim_value = calculate_ssim(img, denoised_img)

    psnr_values.append(psnr_value)
    ssim_values.append(ssim_value)

# Step 6: Compute and display the average PSNR and SSIM values
avg_psnr = sum(psnr_values) / len(psnr_values) if psnr_values else 0
avg_ssim = sum(ssim_values) / len(ssim_values) if ssim_values else 0

print(f"âœ… Denoising complete! Denoised images are saved in: {output_path}")
print(f"ðŸ“Š Average PSNR: {avg_psnr:.2f} dB")
print(f"ðŸ“Š Average SSIM: {avg_ssim:.4f}")
